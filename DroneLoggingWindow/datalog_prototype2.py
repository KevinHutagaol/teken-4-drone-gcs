# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from enum import Enum
import matplotlib.pyplot as mpl
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget, mkPen, exporters
from random import randint

class DataLoggingWindowUI(object):
    logging = False
    logged_data: int = 0
    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.setEnabled(True)
        Widget.resize(640, 330)
        Widget.setMinimumSize(QtCore.QSize(640, 240))
        Widget.setMaximumSize(QtCore.QSize(800, 16777215))
        
        self.comboBox = QtWidgets.QComboBox(Widget)
        self.comboBox.setGeometry(QtCore.QRect(20, 50, 221, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(['Battery Voltage','Velocity','Acceleration','Tasty','FE','Metallurgic Infuser'])
        
        self.linEdit = QtWidgets.QLineEdit(Widget)
        self.linEdit.setGeometry(QtCore.QRect(20, 125, 221, 31))
        self.linEdit.setObjectName("linEdit")
        
        self.label_2 = QtWidgets.QLabel(Widget)
        self.label_2.setGeometry(QtCore.QRect(20, 95, 221, 20))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        
        self.pushButton = QtWidgets.QPushButton(Widget)
        self.pushButton.setGeometry(QtCore.QRect(20, 160, 221, 29))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.setinterval)
        
        self.label_3 = QtWidgets.QLabel(Widget)
        self.label_3.setGeometry(QtCore.QRect(20, 20, 231, 20))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        
        self.pushButton_2 = QtWidgets.QPushButton(Widget)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 240, 221, 29))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.log_data)
        
        self.pushButton_3 = QtWidgets.QPushButton(Widget)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 270, 221, 29))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.download_log)
        
        self.pushButton_4 = QtWidgets.QPushButton(Widget)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 210, 221, 29))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.switch_log)

        self.x = list(range(100))  # 100 time points
        self.y = [randint(0,100) for _ in range(100)]  # 100 data points
        self.d = list(range(100))  # 100 time points
        self.g = [randint(0, 50) for _ in range(100)]  # 100 data points

        
        self.graphicsView_2 = PlotWidget(Widget)
        self.graphicsView_2.setGeometry(QtCore.QRect(260, 20, 361, 291))
        self.graphicsView_2.setObjectName("graphicsView_2")
        pen = mkPen(color=(255, 255, 255))
        
        self.data_line =  self.graphicsView_2.plot(self.x, self.y, pen=pen)
        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(50)
        self.timer.timeout.connect(self.update_plot_data)
        
    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "|---| Data Logger |---|"))
        Widget.setWindowIcon(QtGui.QIcon('clock_00.png'))
        self.label_2.setText(_translate("Widget", "Logging Interval (Milliseconds)"))
        self.pushButton.setText(_translate("Widget", "Set Interval"))
        self.label_3.setText(_translate("Widget", "Data Type | Plot of Data -------->"))
        self.pushButton_2.setText(_translate("Widget", "Start Logging"))
        self.pushButton_3.setText(_translate("Widget", "Download Log"))
        self.pushButton_4.setText(_translate("Widget", "Switch Log"))

    def update_plot_data(self):

        self.x = self.x[1:]  # Remove the first y element.
        self.x.append(self.x[-1] + 1)  # Add a new value 1 higher than the last.

        self.y = self.y[1:]  # Remove the first
        self.y.append( randint(0,100))  # Add a new random value.

        self.d = self.d[1:]  # Remove the first y element.
        self.d.append(self.d[-1] + 1)  # Add a new value 1 higher than the last.

        self.g = self.g[1:]  # Remove the first
        self.g.append(randint(0,50))  # Add a new random value.

        if(DataLoggingWindowUI.logged_data == 0):
            self.data_line.setData(self.x, self.y)  # Update the data.
        if(DataLoggingWindowUI.logged_data == 1):
            self.data_line.setData(self.d, self.g) 

    def download_log(self):
        mpl.plot(self.x,self.y)
        mpl.xlabel("Time")
        mpl.ylabel("Data")
        mpl.grid()
        mpl.show()

    def log_data(self):
        if(DataLoggingWindowUI.logging == False):
            DataLoggingWindowUI.logging = True
            self.pushButton_2.setText("Stop Logging")
            self.timer.start()
        elif(DataLoggingWindowUI.logging == True):
            DataLoggingWindowUI.logging = False
            self.pushButton_2.setText("Start Logging")
            self.timer.stop()
        else:
            return 1

    def setinterval(self):
        self.timer.setInterval(int(self.linEdit.text()))

    def switch_log(self):
        if(DataLoggingWindowUI.logged_data == 0):
            DataLoggingWindowUI.logged_data = 1
            print("logswithced1")
            print(DataLoggingWindowUI.logged_data)
        else:
            DataLoggingWindowUI.logged_data = 0
            print("logswithced0")
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = DataLoggingWindowUI()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec_())

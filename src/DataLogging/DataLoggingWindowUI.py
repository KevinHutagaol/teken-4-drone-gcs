# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
from enum import Enum
import matplotlib.pyplot as mpl
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget, mkPen, exporters
from random import randint
from PyQt5.QtCore import QSize, pyqtSignal, pyqtSlot, QObject
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QLayout
from PyQt5.QtGui import QIntValidator
import numpy as np

class DataLoggingWindow(QObject):
    def __init__(self, view = "DataLoggingWindowUI"):
        super().__init__()

class DataLoggingWindowUI(QWidget):
    window_closed_signal = pyqtSignal()
    logging = False
    logged_data: int = 0
    interval: int
    def __init__(self):
        super().__init__()

        self.setEnabled(True)
        self.resize(640, 330)
        self.setMinimumSize(QtCore.QSize(640, 240))
        self.setMaximumSize(QtCore.QSize(800, 16777215))
        
        self.comboBox = QtWidgets.QComboBox(self)
        self.comboBox.setGeometry(QtCore.QRect(20, 50, 221, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(['Battery Voltage','Velocity','Acceleration','Position','Battery Percentage'])
        self.comboBox.currentIndexChanged.connect(self.switch_log)

        self.linEdit = QtWidgets.QLineEdit(self)
        self.linEdit.setGeometry(QtCore.QRect(20, 125, 221, 31))
        self.linEdit.setObjectName("linEdit")
        

        self.int_validator = QIntValidator(1, 30000)
        self.linEdit.setValidator(self.int_validator)

        self.label_2 = QtWidgets.QLabel(self)
        self.label_2.setGeometry(QtCore.QRect(20, 95, 221, 20))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(20, 160, 221, 29))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.setinterval)
        
        self.label_3 = QtWidgets.QLabel(self)
        self.label_3.setGeometry(QtCore.QRect(20, 20, 231, 20))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        
        self.pushButton_2 = QtWidgets.QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 240, 221, 29))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.log_data)
        
        self.pushButton_3 = QtWidgets.QPushButton(self)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 270, 221, 29))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.download_log)

        self.pushButton_4 = QtWidgets.QPushButton(self)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 210, 221, 29))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.export_csv)

        self.t = list(range(100))  # 100 time points
        self.batvol = [randint(0,100) for _ in range(100)]  # 100 data points
        self.batper = [randint(0, 75) for _ in range(100)]  # 100 data points
        self.accel = [randint(0, 50) for _ in range(100)]  # 100 data points
        self.vel = [randint(0, 125) for _ in range(100)]  # 100 data points
        self.posit = [randint(0, 150) for _ in range(100)]  # 100 data points
        
        self.graphicsView_2 = PlotWidget(self)
        self.graphicsView_2.setGeometry(QtCore.QRect(260, 20, 361, 291))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.graphicsView_2.setTitle("Battery Percentage")
        self.graphicsView_2.setBackground("w")
        pen = mkPen(color=(0, 0, 0))
        
        self.data_line =  self.graphicsView_2.plot(self.t, self.batper, pen=pen)

        self.retranslateUi()

        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(50)
        DataLoggingWindowUI.interval = 50
        self.timer.timeout.connect(self.update_plot_data)
        
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Widget", "|---| Data Logger |---|"))
        self.setWindowIcon(QtGui.QIcon(':/clock_00.png'))
        self.label_2.setText(_translate("Widget", "Logging Interval (Milliseconds)"))
        self.pushButton.setText(_translate("Widget", "Set Interval"))
        self.label_3.setText(_translate("Widget", "Data Type | Plot of Data -------->"))
        self.pushButton_2.setText(_translate("Widget", "Start Logging"))
        self.pushButton_3.setText(_translate("Widget", "Download Log"))
        self.pushButton_4.setText(_translate("Widget", "Export CSV File"))

    def update_plot_data(self):

        self.t.append(self.t[-1] + DataLoggingWindowUI.interval)  # Add a new value 1 higher than the last.

        self.posit.append(randint(0,150))  # Add a new random value.
        self.batvol.append(randint(0,75))
        self.batper.append(randint(0,100))  # Add a new random value
        self.accel.append(randint(0,50))
        self.vel.append(randint(0,125))
        index = self.comboBox.currentIndex()
        if(index == 0):
            self.data_line.setData(self.t, self.batper)  # Update the data.
        elif(index == 1):
            self.data_line.setData(self.t, self.vel)
        elif(index == 2):
            self.data_line.setData(self.t, self.accel) 
        elif(index == 3):
            self.data_line.setData(self.t, self.posit) 
        else:
            self.data_line.setData(self.t, self.batper) 

    def download_log(self):
        cindex = self.comboBox.currentIndex()
        if(cindex == 0):
            mpl.plot(self.t,self.batvol)
        elif(cindex == 1):
            mpl.plot(self.t,self.vel)
        elif(cindex == 2):
            mpl.plot(self.t,self.accel)
        elif(cindex == 3):
            mpl.plot(self.t,self.posit)
        else:
            mpl.plot(self.t,self.batper)    
        
        mpl.xlabel("Time")
        mpl.ylabel("Data")
        mpl.grid()
        mpl.show()

    def log_data(self):
        if(DataLoggingWindowUI.logging == False):
            DataLoggingWindowUI.logging = True
            self.pushButton_2.setText("Stop Logging")
            self.timer.start()
        elif(DataLoggingWindowUI.logging == True):
            DataLoggingWindowUI.logging = False
            self.pushButton_2.setText("Start Logging")
            self.timer.stop()
        else:
            return 1

    def setinterval(self):
        self.timer.setInterval(int(self.linEdit.text()))
        DataLoggingWindowUI.interval = int(self.linEdit.text())

    @pyqtSlot(int)
    def switch_log(self, index):
        if(index == 0):
            self.data_line.setData(self.t, self.batper)  # Update the data.
            self.graphicsView_2.setTitle("Battery Percentage")
        elif(index == 1):
            self.data_line.setData(self.t, self.vel)
            self.graphicsView_2.setTitle("Velocity")
        elif(index == 2):
            self.data_line.setData(self.t, self.accel) 
            self.graphicsView_2.setTitle("Acceleration")
        elif(index == 3):
            self.data_line.setData(self.t, self.posit)
            self.graphicsView_2.setTitle("Position")
        else:
            self.data_line.setData(self.t, self.batvol) 
            self.graphicsView_2.setTitle("Battery Voltage")
    
    def closeEvent(self, e):
        e.ignore()
        self.hide()
        self.window_closed_signal.emit()

    def export_csv(self):
        droneDataTable = np.array([self.t, self.batper, self.batvol, self.accel, self.vel]).T
        droneDataFrame = pd.DataFrame(droneDataTable, columns=["Time", "Battery Percentage", "Battery Voltage", "Acceleration", "Velocity"])
        print(droneDataFrame)
        droneDataFrame.to_csv('drone_data.csv')